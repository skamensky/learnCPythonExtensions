Setting errors
    Return NULL
    PyErr_SetFromErrno(), no need to increment the exception type
    If an error has occurred in a chain of functions and error has already been set, return NULL. No need to set errors. This is like allowing error to bubble up naturally.
    If you call malloc and it results in a failure,must set a failure of PyErr_NoMemory.
    PyArg_ParseTuple and the like are exceptions in that they return 0/-1 instead of NULL even on failure.
    If desired, custom errors can be created

Memory Management
    Py_DECREF, does not accept NULL objects
    Py_XDECREF, does accept NULL objects
    If decrementing results in 0,free is (eventually) called, and the python __del__ is executed. Ensure consistent global state before this happens.

    When a C Function denoted as 'Return value: New reference.' is called, the object returned has reference count of +1 'relative' to the calling function.
    You are responsible for returning the objects' reference count 'relative' to your function to 0 before your function exits.

    When a C Function denoted as  'Return value: Borrowed reference.' is called, the object returns has a reference count of 0 'relative' to the calling function.
    You should not decrement the reference count to that object in the calling function.
    You can explicitly demarcate your interested in that object by incrementing the reference count in which case your responsibility is to bring the reference count back to 0 'relative' to the calling function.

    PyTuple_SetItem and PyList_SetItem 'steal' the object given to them. Meaning calling one of those two functions is equivalent to decrementing the reference count by 1.

    When a C function is called from Python, the returned object must have a relative reference count of +1.
    This is because the the python function will become the new 'owner' and you are like the C Function denoted 'Return value: New reference.' from the point of view of the python function

    When you are operating on a borrowed reference, if at some point you are unsure that a sequential call might invalidate the reference (i.e. bring the refcount to 0),
    increment the reference before the potential invalidating call and decrement it when you are done using it

    When you want your python method to return None, use this idiom:
        Py_INCREF(Py_None);return Py_None; Or use the macro Py_RETURN_NONE;

Debugging
    Use the faulthandler module to see the perpetrating line "import faulthandler;faulthandler.enable()"

Reading:
    To Read:
        https://docs.python.org/3/c-api/concrete.html
        https://pythonextensionpatterns.readthedocs.io/en/latest/index.html
    Read:
        https://docs.python.org/3/extending/extending.html#refcounts
        https://pythonextensionpatterns.readthedocs.io/en/latest/refcount.html
To Try:
    Write a variadic function
    Write a C function that supports multithreading (see Py_BEGIN_ALLOW_THREADS and friends)
    Write a utility function that takes an array of PyObjects and ref-decrements them. Do the same for ref-incrementing.